#region (c)2008-2019 Hawkynt
/*
 *  cImage 
 *  Image filtering library 
    Copyright (C) 2008-2019 Hawkynt

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#endregion
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
  var shiftMultipliers=Enumerable.Range(0,8).ToDictionary(i=>1<<i,i=>i);
  var sourceXRange=new[]{-2,-1,0,1,2};
  var sourceYRange=new[]{-2,-1,0,1,2};
  var targetXRange=new[]{0,1,2,3,4};
  var targetYRange=new[]{-1,0,1,2,3,4};
  Func<int,string> GetLineDescription=v=>v<0?"M"+Math.Abs(v).ToString():"P"+v.ToString();
  Func<int,int,string> GetPointDescription=(x,y)=>GetLineDescription(x)+GetLineDescription(y);
#>
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics.Contracts;
using Imager.Interface;

namespace Imager {


  /// <summary>
  /// This class gets us fast access to a small window of pixels in the source and target images.
  /// </summary>
  public interface IPixelWorker<TColorStorage> {
    int SourceX();
    int SourceY();
    int SourceHeight();

    void IncrementX(int targetXIncrementor);

    #region access source points
<# foreach(var y in sourceYRange) { #>
<# foreach(var x in sourceXRange) { #>
    TColorStorage Source<#=GetPointDescription(x,y)#>();
<# } #>
<# } #>
    #endregion

    #region access target points
<# foreach(var y in targetYRange) { #>
<# foreach(var x in targetXRange) { #>
    void Target<#=GetPointDescription(x,y)#>(TColorStorage value);
<# } #>
<# } #>
    #endregion

  }

  /// <summary>
  /// This class gets us fast access to a small window of pixels in the source and target images.
  /// </summary>
  internal class PixelWorker<TColorStorage>:IPixelWorker<TColorStorage> {
    private readonly Func<int, TColorStorage> _sourceImageGetter;
    private int _sourceX;
    private readonly int _sourceY;
    private int _sourceOffset;
    
    private readonly int _sourceWidth;
    private readonly int _sourceStride;
    private readonly int _sourceHeight;
    private readonly OutOfBoundsUtils.OutOfBoundsHandler _sourceXWrapper;
    private readonly OutOfBoundsUtils.OutOfBoundsHandler _sourceYWrapper;

    private readonly Action<int,TColorStorage> _targetImageSetter;
    private int _targetOffset;

    #region offset calculators for source image
    // these are lazy calculated offsets, so once used, the method pointer gets replaced by a function that returns the calculated constant
<# foreach(var i in sourceXRange.Where(i=>i!=0)) { #>
    private Func<int> _sourceOffset<#=GetLineDescription(i)#>X;
    private int _sourceOffset<#=GetLineDescription(i)#>XValue;
<# } #>
<# foreach(var i in sourceYRange.Where(i=>i!=0)) { #>
    private Func<int> _sourceOffset<#=GetLineDescription(i)#>Y;
    private int _sourceOffset<#=GetLineDescription(i)#>YValue;
<# } #>
    #endregion

    #region offsets for target image
<# foreach(var i in targetYRange.Where(i=>i!=0)) { #>
    private readonly int _targetOffset<#=GetLineDescription(i)#>Y;
<# } #>
    #endregion

    public PixelWorker(Func<int, TColorStorage> sourceImageGetter, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int sourceStride, OutOfBoundsUtils.OutOfBoundsHandler sourceXWrapper, OutOfBoundsUtils.OutOfBoundsHandler sourceYWrapper, Action<int, TColorStorage> targetImageSetter, int targetX, int targetY, int targetStride) {
      Contract.Requires(sourceX >= 0 && sourceX < sourceWidth && sourceY >= 0 && sourceY < sourceHeight);
      this._sourceImageGetter = sourceImageGetter;
      this._sourceX = sourceX;
      this._sourceY = sourceY;
      this._sourceWidth = sourceWidth;
      this._sourceStride = sourceStride;
      this._sourceHeight = sourceHeight;

      // we can safely calculate this offset, because we assume that the central source pixel is never out of bounds
      this._sourceOffset = sourceWidth * sourceY + sourceX;

      // we only check pixels in a row or column once for over-/underflow, to avoid calling the wrappers over and over again
      this._sourceXWrapper = sourceXWrapper;
      this._sourceYWrapper = sourceYWrapper;

      // we calculate a delta offset for pixels around the center and store these independent X from Y
<# foreach(var i in sourceXRange.Where(i=>i!=0)) { #>
      this._sourceOffset<#=GetLineDescription(i)#>X = this._CalculateOffset<#=GetLineDescription(i)#>X;
<# } #>
<# foreach(var i in sourceYRange.Where(i=>i!=0)) { #>
      this._sourceOffset<#=GetLineDescription(i)#>Y = this._CalculateOffset<#=GetLineDescription(i)#>Y;
<# } #>

      this._targetImageSetter = targetImageSetter;
      this._targetOffset = targetStride * targetY + targetX;

      // pre-calculating the row offset for target image, because they surely get used
<# foreach(var i in targetYRange.Where(i=>i!=0)) { #>
      this._targetOffset<#=GetLineDescription(i)#>Y = targetStride<#=i==1?"     ":(shiftMultipliers.ContainsKey(i)?" << "+shiftMultipliers[i].ToString():" *  "+i.ToString())#>;          // for nx<#=(i+1)#> filters
<# } #>
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int SourceX() => this._sourceX;
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int SourceY() => this._sourceY;
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public int SourceHeight() => this._sourceHeight;

    public void IncrementX(int targetXIncrementor){
      this._targetOffset+=targetXIncrementor;
      ++this._sourceOffset;
      ++this._sourceX;
<# foreach(var i in sourceXRange.Where(i=>i!=0)) { #>
<# if(i==-1){ #>
      this._sourceOffset<#=GetLineDescription(i)#>X = this._GetOffset<#=GetLineDescription(i)#>X;
      this._sourceOffset<#=GetLineDescription(i)#>XValue = -1;
<# } else { #>
      this._sourceOffset<#=GetLineDescription(i)#>X = this._CalculateOffset<#=GetLineDescription(i)#>X;
<# } #>
<# } #>
    }

    #region access source points
<# foreach(var y in sourceYRange) { #>
<# foreach(var x in sourceXRange) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TColorStorage Source<#=GetPointDescription(x,y)#>()
      => this._sourceImageGetter(this._sourceOffset<#=x==0?string.Empty:" + this._sourceOffset"+GetLineDescription(x)+"X()"#><#=y==0?string.Empty:" + this._sourceOffset"+GetLineDescription(y)+"Y()"#>)
      ;
<# } #>
<# } #>
    #endregion

    #region access target points
<# foreach(var y in targetYRange) { #>
<# foreach(var x in targetXRange) { #>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Target<#=GetPointDescription(x,y)#>(TColorStorage value)
      => this._targetImageSetter(this._targetOffset<#=x==0?string.Empty:" + "+x#><#=y==0?string.Empty:" + this._targetOffset"+GetLineDescription(y)+"Y"#>, value)
      ;
<# } #>
<# } #>
    #endregion

    #region calculate source offset deltas

<# foreach(var i in sourceXRange.Where(i=>i!=0)) { #>
    private int _GetOffset<#=GetLineDescription(i)#>X() => this._sourceOffset<#=GetLineDescription(i)#>XValue;
    private int _CalculateOffset<#=GetLineDescription(i)#>X() {
      var current = this._sourceX;
      var value = current <#=i<0?"- "+Math.Abs(i).ToString():"+ "+i.ToString()#>;
      if (value <#=i<0?"< 0":">= this._sourceWidth"#>)
        value = this._sourceXWrapper(value, this._sourceWidth, <#=i<0?"true":"false"#>);

      var result = value - current;
      this._sourceOffset<#=GetLineDescription(i)#>XValue = result;
      this._sourceOffset<#=GetLineDescription(i)#>X = this._GetOffset<#=GetLineDescription(i)#>X;
      return result;
    }
<# } #>
<# foreach(var i in sourceYRange.Where(i=>i!=0)) { #>
    private int _GetOffset<#=GetLineDescription(i)#>Y() => this._sourceOffset<#=GetLineDescription(i)#>YValue;
    private int _CalculateOffset<#=GetLineDescription(i)#>Y() {
      var current = this._sourceY;
      var value = current <#=i<0?"- "+Math.Abs(i).ToString():"+ "+i.ToString()#>;
      if (value <#=i<0?"< 0":">= this._sourceHeight"#>)
        value = this._sourceYWrapper(value, this._sourceHeight, <#=i<0?"true":"false"#>);

      var result = (value - current) * this._sourceStride;
      this._sourceOffset<#=GetLineDescription(i)#>YValue = result;
      this._sourceOffset<#=GetLineDescription(i)#>Y = this._GetOffset<#=GetLineDescription(i)#>Y;
      return result;
    }
<# } #>
    #endregion

  }
}